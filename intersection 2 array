#include<iostream>
#include<unordered_map>
#include<vector>
using namespace std;

vector<int> intersectionOfArrays(int arr1[], int n1, int arr2[], int n2) {
    unordered_map<int, int> map;
    vector<int> intersection;
    
    // Step 1: Store frequency of elements from the first array in the hashmap
    for (int i = 0; i < n1; i++) {
        map[arr1[i]]++;
    }

    // Step 2: Traverse the second array and check for intersection
    for (int i = 0; i < n2; i++) {
        if (map[arr2[i]] > 0) {  // Check if element exists in the hashmap
            intersection.push_back(arr2[i]);
            map[arr2[i]] = 0;  // Mark the element as "used" by setting its count to 0
        }
    }

    return intersection;
}

int main() {
    int arr1[] = {1, 2, 2, 1, 4};
    int arr2[] = {2, 2, 4, 5, 1};

    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    int n2 = sizeof(arr2) / sizeof(arr2[0]);

    vector<int> result = intersectionOfArrays(arr1, n1, arr2, n2);

    cout << "Intersection of arrays: ";
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
