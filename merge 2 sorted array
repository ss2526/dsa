#include<iostream>
#include<vector>
using namespace std;

// Function to merge two sorted arrays
vector<int> mergeSortedArrays(const vector<int>& arr1, const vector<int>& arr2) {
    vector<int> merged;  // Resulting merged array
    int i = 0, j = 0;

    // Traverse both arrays and merge them
    while (i < arr1.size() && j < arr2.size()) {
        if (arr1[i] < arr2[j]) {
            merged.push_back(arr1[i]);
            i++;
        } else {
            merged.push_back(arr2[j]);
            j++;
        }
    }

    // If there are remaining elements in arr1
    while (i < arr1.size()) {
        merged.push_back(arr1[i]);
        i++;
    }

    // If there are remaining elements in arr2
    while (j < arr2.size()) {
        merged.push_back(arr2[j]);
        j++;
    }

    return merged;
}

int main() {
    vector<int> arr1 = {1, 3, 5, 7};
    vector<int> arr2 = {2, 4, 6, 8};

    // Merge the two sorted arrays
    vector<int> merged = mergeSortedArrays(arr1, arr2);

    // Print the merged array
    cout << "Merged Array: ";
    for (int num : merged) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
Explanation:
Function mergeSortedArrays:

This function takes two sorted arrays (arr1 and arr2) and merges them into one sorted array.
It uses two pointers, i and j, initialized to 0 for arr1 and arr2, respectively.
The function compares the elements at arr1[i] and arr2[j] and adds the smaller of the two to the merged array.
After one of the arrays is exhausted, it appends the remaining elements from the other array.
Main Function:

The arrays arr1 and arr2 are provided as inputs, and the mergeSortedArrays function is called to merge them.
The merged array is printed.

Explanation:
The Two Pointers:

i is an index pointer for arr1 (the first sorted array).
j is an index pointer for arr2 (the second sorted array).
Both i and j are initially set to 0, meaning they both start at the first element of their respective arrays.

The while Loop Condition:

while (i < arr1.size() && j < arr2.size()):
This condition checks whether there are still elements left to compare in both arrays. The loop will continue running as long as both arrays still have elements to compare.
i < arr1.size() ensures that we haven't reached the end of arr1.
j < arr2.size() ensures that we haven't reached the end of arr2.
Comparing Elements:
If arr1[i] < arr2[j]:

This means that the current element in arr1 (at index i) is smaller than the current element in arr2 (at index j).
We add arr1[i] to the merged array using merged.push_back(arr1[i]).
We then increment i (i.e., move the pointer to the next element in arr1).
Otherwise (else):

If arr2[j] <= arr1[i] (meaning the current element in arr2 is smaller or equal to the current element in arr1):
We add arr2[j] to the merged array using merged.push_back(arr2[j]).
We then increment j (i.e., move the pointer to the next element in arr2).
